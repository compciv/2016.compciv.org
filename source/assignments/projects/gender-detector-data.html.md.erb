---
title: Gender Detector on Real Life Data
description: |
  Using an algorithm to classify a first name as "male" or "female", estimate the gender breakdown for a public data set.
due_date: 2016-03-17
points: 100
kind: Project
---


# Milestones


## For Tuesday

In your `projects` folder, create a `README.md` file:

Identify a dataset of at least several thousand records. The dataset should have a field that corresponds to a person's name.

- Link to the landing page
- Link to the dataset directly if possible.
- Describe each field
- Look around (i.e. Google) for any previous research that has attempted to classify the data.

Some examples:

- [FEC individual donors](http://www.fec.gov/finance/disclosure/ftpdet.shtml#a2015_2016)
  + [Data Dictionary - Contributions by Individuals](http://www.fec.gov/finance/disclosure/metadata/DataDictionaryContributionsbyIndividuals.shtml)
  + Related reading: [Sex, Money & Politics](https://www.opensecrets.org/news/reports/gender.php)
- [NYT bylines via article search API](http://developer.nytimes.com/docs/read/article_search_api_v2)
- [NYT Best-selling authors via books API](http://developer.nytimes.com/docs/books_api/)
- [California payroll](http://transparentcalifornia.com/) (many other states hvae payrolls too)



## Deliverable

The code used to:

- Download the source data
- Classify/analyze the source data

And a short write-up about what you found, what surprised you, and how it compared to past research.

You can use the code from relevant homework.



## Sample script for classifying Congressmembers

This is just a quick example -- the source dataset already has a gender field, but this double checks our data against it:

~~~py
from os.path import exists, join
from zoofoo import detect_gender

import csv
import requests
DATA_DIR = 'tempdata'
CONGRESS_DATA_URL = 'http://unitedstates.sunlightfoundation.com/legislators/legislators.csv'
CONGRESS_DATA_FILENAME = join(DATA_DIR, 'legislators.csv')
##### only download it if we need it
if not exists(CONGRESS_DATA_FILENAME):
    print("Downloading", CONGRESS_DATA_URL)
    resp = requests.get(CONGRESS_DATA_URL)
    with open(CONGRESS_DATA_FILENAME, 'w') as f:
        f.write(resp.text)


def pick_usable_name(person):
    # if a person's first name is just an initial, like
    # Rep   H.  Morgan  Griffith
    # return the middle name if it exists
    possible_keys = ['firstname', 'middlename', 'nickname']
    for key in possible_keys:
        for x in person[key].split(" "):
            if '.' not in x and len(x) > 1:
                return x
    return person['firstname']




##### Assuming tempdata/districts.csv exists:
congressdata = list(csv.DictReader(open(CONGRESS_DATA_FILENAME)))
wrongs = 0

for person in congressdata:
    official_gender = person['gender']
    usablename = pick_usable_name(person)
    result = detect_gender(usablename)
    if result['gender'] != official_gender:
        wrongs += 1
        print(person['firstname'], result['gender'], result['ratio'], result['total'])


print("There were", wrongs, "incorrect gender guesses out of", len(congressdata))
~~~




## Webscraping example

If you know how to parse HTML, you can generate a list from a webpage if you wish. Here's the result of scraping the names from the NYT's [The Faces of American Power](http://www.nytimes.com/interactive/2016/02/26/us/race-of-american-power.html):

        F 71
        M 428
        NA 10




Here's the code, which uses the detect_gender function:

~~~py
import requests
import json
from lxml import html
from zoofoo import detect_gender
from os.path import join
NYT_POWER_FNAME = join('tempdata', 'nyt-gender-power.json')
url = "http://www.nytimes.com/interactive/2016/02/26/us/race-of-american-power.html"
resp = requests.get(url)
doc = html.fromstring(resp.text)

# each ".g-person" element looks like this:
# <div class="g-person g-person-race-white g-tooltip tooltipstered" data-name="Steven A. Kandarian" data-employer="MetLife" style="width: 105px; height: 105px;">
#             <div class="g-stretchy">
#               <img class="g-spacer" alt="" src="http://graphics8.nytimes.com/packages/flash/multimedia/ICONS/transparent.png">
#               <img src="http://graphics8.nytimes.com/newsgraphics/2016/01/26/race-power/assets/images/fortune-100-bg-120.jpg" alt="" class="g-sprite g-sprite-fortune-100-41">
#             </div>
#             <div class="g-debug">
#               Steven A. Kandarian
#             </div>
#            </div>

people = doc.cssselect('.g-person')
mylist = []
for p in people:
    fullname = p.attrib['data-name']
    namepieces =  fullname.split(' ')
    if '.' in namepieces[0]:  # i.e if first name is "J."
        usable_name = namepieces[1]
    else:
        usable_name = namepieces[0]

    xresult = detect_gender(usable_name)
    # add the "fullname" that we derived the usable_name
    # so that we can compare later if needed
    xresult['full_name'] = fullname
    mylist.append(xresult)

# print male/female/NA
for g in ['F', 'M', 'NA']:
    print(g, sum([1 for x in mylist if x['gender'] == g]))


# write to file for later examination
with open(NYT_POWER_FNAME, 'w') as f:
    f.write(json.dumps(mylist, indent=2))
~~~
