---
title: "GoT Baby Names (2014 Edition)?"
description: |
  Read and analyze a file of comma-delimited baby name records from the Social Security Administration.
summary: |
    This exercise set is meant to test our familiarity with loops, list objects, simple string methods, and your own eyes for recognizing basic patterns and structure within a text file. These are baby steps (albeit big ones) for learning how to programmatically analyze text files in a far more efficient and scalable way than we ever could with spreadsheets.

due_date: 2016-02-02 
exercises_slug: 0012-got-babynames-2014
references:
  - slug: ssa-babynames-data
    url: https://www.ssa.gov/oact/babynames/limits.html
    title: "Popular Baby Names: Beyond the Top 1000 Names"
    description: |
      Download year-by-year baby name datasets.
    publisher: Social Security Administration
  - slug: ssa-babynames-background
    url: https://www.ssa.gov/oact/babynames/background.html
    title: Background Information on the baby names dataset
    description: |
      In 1998, the Social Security Administration published Actuarial Note #139, Name Distributions in the Social Security Area, August 1997, on the distribution of given names of Social Security number holders. The note, written by actuary Michael W. Shackleford, gave birth to the present website. 
  - slug: wikipedia-csv-standardization
    title: "Comma-separated values: Standardization"
    url: "https://en.wikipedia.org/wiki/Comma-separated_values#Standardization"
    publisher: Wikipedia
    description: |
      CSV files are so simple! Why are people wasting time thinking of a "standardization" for it? I mean how complicated can it get...?
  - slug: nydn-babynames
    url: http://www.nydailynews.com/news/national/top-u-s-baby-names-list-includes-anakin-leia-khaleesi-article-1.2338949
    title: "Top U.S. baby names list includes Anakin, Leia and Khaleesi" 
    author: Thomas Tracy
    publisher: New York Daily News
    created_at: 2015-08-27
    description: |
      For the first time ever, a popular “Star Wars” character has found its way to the country’s top 1,000 baby names, according to the Social Security Administration.

  - slug: python-docs-functions-sorted
    url: https://docs.python.org/3/library/functions.html#sorted
    title: "Built-in Functions: sorted"
    publisher: Python documentation
    description: |
      Even though the list object has its own `sort()` method, I will heavily implore you to ignore it and instead, use the `sorted()` function, which sorts a list without mutating it.

  - slug: python-docs-sorting-howto
    url: https://docs.python.org/3/howto/sorting.html#sortinghowto
    title: Sorting HOW TO
    publisher: Python documentation
    description: |
      This tutorial describes several ways to sort sequences in Python. I highly recommend on just focusing on the `sorted()` examples.

  - slug: python-docs-csv
    url: https://docs.python.org/3/library/csv.html
    title: CSV File Reading and Writing
    publisher: Python documentation
    description: |
      The csv module implements classes to read and write tabular data in CSV format. It allows programmers to say, “write this data in the format preferred by Excel,” or “read data from this file which was generated by Excel,” without knowing the precise details of the CSV format used by Excel. Programmers can also describe the CSV formats understood by other applications or define their own special-purpose CSV formats.
---


This is just a fun exercise using the most adorable of datasets as a way to practice the process of turning raw text into data. Sure, you could download the provided dataset and import it into Excel. But I think you'll (eventually) find that it's much, much faster to do it programmatically, especially if you want to analyze more than one year's worth of data. Or to programmatically turn the data into an analysis tool that can be used in other kinds of bespoke analyses...

Be sure to read up on [loops, conditionals, and lists](/articles), and to be familiar with how we downloaded and stored files in the <%=link_to "Shakespeare text files exercises", "/practicum/shakefiles/shakefiles-landing-page" %>


## Beware of CSVs

If you think you know how to use <%=link_to "Python's csv module", ref_url('python-docs-csv') %>, go ahead and use it if you think it makes things easier. But this dataset is so simple -- "simple", not as in potential for interesting insights, but in that it has none of the many [problems inherent to comma-delimited text](<%=ref_url 'wikipedia-csv-standardization'%>) that can seriously wreck your day/will to live.

In fact, don't think for a minute (after finishing this exercise set) that parsing (or creating) CSV-text is as simple as understanding that the values are separated by commas and calling the `split()` method. Everything about data is overly complicated, even commas, but especially text, even though it's "just text".

For every other situation involving comma-delimited text data, we _will_ be using <%=link_to "Python's csv module", ref_url('python-docs-csv') %>.




## Getting the raw data yourself

For this exercise, [I've extracted the 2014 data file](http://stash.compciv.org/ssa_baby_names/ssa-babynames-nationwide-2014.txt) from the original dataset for you to use, so that you don't have to download and process the entire dataset (which spans 100+ years).

However, if you're interested in the raw dataset (and I might revisit the data for future exercises and examples), you <%=link_to "can download it yourself from the Social Security Administration's website", ref_url('ssa-babynames-data') %>. In fact, once you've finished this exercise set, it's just a call to `glob.glob()` and an extra for-loop (and about 100MB if free disk space) to repeat the analysis for every year of Social Security data.


### Caveats: It ain't all babies

The phrasing and terminology of this exercise doesn't quite precisely describe the data. The name counts are based on applications for Social Security cards. The majority of these come from babies born in the given year, but not _all_ of them. Also, the data only includes names that are at least 2 characters long. And finally, the data only includes applications for which the year of birth, sex, and U.S. state of birth is known.

But it's just easier to refer to this as the babyname-counting exercises. You can read the <%= link_to "background of the data on the Social Security Administration's website", ref_url("ssa-babynames-background") %>, which, incidentally, also just simplifies things as being a bunch of baby names. So don't judge me. 
